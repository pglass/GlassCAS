'''
Test cases for methods in rigid_parsing
'''

from parsing.parser_definitions import (
    CONSTANTS, 
    VARIABLES, 
    ALL_FUNCTIONS,
    LPARENS, 
    RPARENS
)

#
# rigid_parsing.tokenize test cases
#
tokenize_constants_cases = [
    ("".join(list(CONSTANTS.keys()))  , list(CONSTANTS.keys())),
    (" ".join(list(CONSTANTS.keys())) , list(CONSTANTS.keys())),
    ("e"                        , ["e"]),
    ("pi"                       , ["pi"]),
    ("eee"                      , ["e", "e", "e"]),
    ("pipipi"                   , ["pi", "pi", "pi"]),
]

tokenize_functions_cases = [
    ("".join(ALL_FUNCTIONS)     , ALL_FUNCTIONS),
    (" ".join(ALL_FUNCTIONS)    , ALL_FUNCTIONS),
    ("cos"                      , ["cos"]),
    ("cossin"                   , ["cos", "sin"]),
    ("cossincossin"             , ["cos", "sin", "cos", "sin"]),
    ("-cos+"                    , ["-", "cos", "+"]),
]

tokenize_variables_cases = [
    ("".join(VARIABLES)      , VARIABLES),
    (" ".join(VARIABLES)     , VARIABLES),
    ("x"                     , ["x"]),
    ("xx"                    , ["x", "x"]),
    ("xxxx"                  , ["x", "x", "x", "x"]),
    ("xy"                    , ["x", "y"]),
    ("aqxz"                  , ["a", "q", "x", "z"]),
    ("ywpb"                  , ["y", "w", "p", "b"]),
]

tokenize_parens_cases = [
    ("".join(RPARENS + LPARENS)  , RPARENS + LPARENS),
    ("("                         , ["("]),
    (")"                         , [")"]),
    ("()"                        , ["(", ")"]),
    ("())(()"                    , ["(", ")", ")", "(", "(", ")"]),
]

tokenize_reals_cases = [
    ("0"                     , ["0"]),
    (".0"                    , [".0"]),
    ("0.0"                   , ["0.0"]),
    (".1"                    , [".1"]),
    ("1."                    , ["1."]),
    ("1.0"                   , ["1.0"]),
    ("1.1"                   , ["1.1"]),
    ("9876543210"            , ["9876543210"]),
    ("9876543210."           , ["9876543210."]),
    ("9876543210.0"          , ["9876543210.0"]),
    (".0123456789"           , [".0123456789"]),
    ("0.0123456789"          , ["0.0123456789"]),
    ("9876543210.0123456789" , ["9876543210.0123456789"]),
]

tokenize_complex_cases = [
    ("j"                     , ["j"]),
    ("1j"                    , ["1j"]),
    ("j1"                    , ["1j"]),
    ("9876543210j"           , ["9876543210j"]),
    ("j9876543210"           , ["9876543210j"]),
    ("1.1j"                  , ["1.1j"]),
    ("j1.1"                  , ["1.1j"]),
    (".1j"                   , [".1j"]),
    ("j.1"                   , [".1j"]),
    ("9876543210.0123456789j", ["9876543210.0123456789j"]),
    ("j9876543210.0123456789", ["9876543210.0123456789j"]),
    ("jj"                    , ["j", "j"]),
    ("23.45jj67.89"          , ["23.45j", "67.89j"]),
    ("1+4j"                  , ["1", "+", "4j"]),
]

tokenize_combined_cases = [
    ("1+2"                   , ["1", "+", "2"]),
    ("123+456"               , ["123", "+", "456"]),
    ("(4+5)*5"               , ["(", "4", "+", "5", ")", "*", "5"]),
    ("(4+5j)*5j"             , ["(", "4", "+", "5j", ")", "*", "5j"]),
    ("(123+456)*789"         , ["(", "123", "+", "456", ")", "*", "789"]),
    (
        "(234+567)*(123+456)", 
        ["(", "234", "+", "567", ")", "*", "(", "123", "+", "456", ")"]
    ),
    ("  (  1.2 + 555.99)  "  , ["(", "1.2", "+", "555.99", ")"]),
    (" .323 + .7 + 0.7"      , [".323", "+", ".7", "+", "0.7"]),
    ("cos"                   , ["cos"]),
    ("coscos"                , ["cos", "cos"]),
    ("co"                    , ["c", "o"]),
    ("cosin"                 , ["cos", "i", "n"]),
    ("x*sin(x)"              , ["x", "*", "sin", "(", "x", ")"]),
    ("c*cos(s)"              , ["c", "*", "cos", "(", "s", ")"]),
    ("pi * e / cos(e)"       , ["pi", "*", "e", "/", "cos", "(", "e", ")"]),
    (
        "coscos(1.1+3)*cos(5)", 
        ["cos", "cos", "(", "1.1", "+", "3", ")", "*", "cos", "(", "5", ")"]
    ),
]

tokenize_bad_input_cases = [
    ".",
    "..",
    ".1.",
    ".12345678.",
    "1.."
    "1..2",
    "123..456",
    "23.45.67",
    "\\",
    "#",
    "123.#",
    "+.",
    ".+",
]

#
# rigid_parsing.to_RPN test cases
#
    
rpn_basic_correctness_cases = [
    (VARIABLES                  , VARIABLES),
    (list('0123456789')         , list('0123456789')),
    (['3j', '=', '4']            , ['3j', '4', '=']),
    (['3j', '+', '4']            , ['3j', '4', '+']),
    (['3j', '-', '4']            , ['3j', '4', '-']),
    (['3j', '*', '4']            , ['3j', '4', '*']),
    (['3j', '/', '4']            , ['3j', '4', '/']),
    (['3j', '%', '4']            , ['3j', '4', '%']),
    (['3j', '^', '4']            , ['3j', '4', '^']),
    
    (['x', '=', 'y', '=', 'z']  , ['x', 'y', '=', 'z', '=']),
    (['x', '+', 'y', '+', 'z']  , ['x', 'y', '+', 'z', '+']),
    (['x', '-', 'y', '-', 'z']  , ['x', 'y', '-', 'z', '-']),
    (['x', '*', 'y', '*', 'z']  , ['x', 'y', '*', 'z', '*']),
    (['x', '/', 'y', '/', 'z']  , ['x', 'y', '/', 'z', '/']),
    (['x', '%', 'y', '%', 'z']  , ['x', 'y', '%', 'z', '%']),
    (['x', '^', 'y', '^', 'z']  , ['x', 'y', 'z', '^', '^']), # '^' is right associative
    
    (['cos', '3']               , ['3', 'cos']),
    (['3', '!']                 , ['3', '!']),
    (['cos', 'cos', 'cos', '3'] , ['3', 'cos', 'cos', 'cos']),
    (['3', '!', '!', '!']       , ['3', '!', '!', '!']),
]
    
rpn_precedence_cases = [
    # equals sign is lowest precedence
    (['x', '+', '5', '=', 'y', '-', '3'], ['x', '5', '+', 'y', '3', '-', '=']),
    (
        ['x', '*', '5', '=', 'y', '^', '3', '!'], 
        ['x', '5', '*', 'y', '3', '!', '^', '=']
    ),

    # multiplication/division/modulus are higher than addition/subtraction
    (['w', '+', 'x', '*', 'y']          , ['w', 'x', 'y', '*', '+']),
    (['w', '+', 'x', '/', 'y']          , ['w', 'x', 'y', '/', '+']),
    (['w', '+', 'x', '%', 'y']          , ['w', 'x', 'y', '%', '+']),
    (['w', '+', 'x', '*', 'y', '+', 'z'], ['w', 'x', 'y', '*', '+', 'z', '+']),
    (['w', '+', 'x', '/', 'y', '+', 'z'], ['w', 'x', 'y', '/', '+', 'z', '+']),
    (['w', '+', 'x', '%', 'y', '+', 'z'], ['w', 'x', 'y', '%', '+', 'z', '+']),
    
    # functions are higher than +-*/%
    (['cos', 'x', '=', 'y']       , ['x', 'cos', 'y', '=']),
    (['cos', 'x', '+', 'y']       , ['x', 'cos', 'y', '+']),
    (['cos', 'x', '-', 'y']       , ['x', 'cos', 'y', '-']),
    (['cos', 'x', '*', 'y']       , ['x', 'cos', 'y', '*']),
    (['cos', 'x', '/', 'y']       , ['x', 'cos', 'y', '/']),
    (['cos', 'x', '%', 'y']       , ['x', 'cos', 'y', '%']),
    (['cos', 'x', '=', 'sin', 'y'], ['x', 'cos', 'y', 'sin', '=']),
    (['cos', 'x', '+', 'sin', 'y'], ['x', 'cos', 'y', 'sin', '+']),
    (['cos', 'x', '-', 'sin', 'y'], ['x', 'cos', 'y', 'sin', '-']),
    (['cos', 'x', '*', 'sin', 'y'], ['x', 'cos', 'y', 'sin', '*']),
    (['cos', 'x', '/', 'sin', 'y'], ['x', 'cos', 'y', 'sin', '/']),
    (['cos', 'x', '%', 'sin', 'y'], ['x', 'cos', 'y', 'sin', '%']),
    
    # exponentiation is higher than functions
    (['sqrt', 'x', '^', 'y']        , ['x', 'y', '^', 'sqrt']),
    
    # factorial is highest precedence
    (['tan', 'x', '!']              , ['x', '!', 'tan']),
    
]

rpn_parens_cases = [
    (['(', ')']                             , []),
    (['(', '3', ')']                        , ['3']),
    (['(', '(', '3', ')', ')']              , ['3']),
    (['(', '(', '3', '(', ')', ')', ')']    , ['3']),
    
    (['3', '*', '(', 'x', ')']              , ['3', 'x', '*']),
    (['(', '3', ')', '*', 'x']              , ['3', 'x', '*']),
    (['(', '3', ')', '*', '(', 'x', ')']    , ['3', 'x', '*']),
    
    (
        ['(', '3j', '+', '4', ')', '*', '(', 'x', '+', 'y', ')'],
        ['3j', '4', '+', 'x', 'y', '+', '*']
    ),
        
    (['sqrt', '(', 'x', ')', '^', 'y']      , ['x', 'sqrt', 'y', '^']),
    
]

rpn_bad_input_cases = [
    ['('],
    [')'],
    [')', '('],
    ['3', '*', ')'],
    ['3', '*', 'x', ')'],
    ['3', '*', 'x', '('],
    ['(', '3', '*', 'x']
]

#
# rigid_parsing.to_tree test cases
#
# These go in as tokens in RPN. The tree structure is checked using `node`.
#
tree_operand_order_cases = [
    (['1']                      , '1'),
    (['1.2']                    , '1.2'),
    (['3j']                     , '3j'),
    (['x']                      , 'x'),
    (['1']                      , '1'),
    (['x', 'y', '+']            , 'x y +'),
    (['x', 'y', '+', 'z', '*']  , 'x y + z *'),
]

tree_bad_input_cases = [
    ['+'],
    ['x', '+'],
    ['x', '+', 'y', '*'],
    ['x', '+', 'y', 'z', '*'],
]

#
# rigid_parsing.node.reduce test cases
#
tree_reduce_cases = [
    (['1']                  , '1'),
    (['1.2']                , '1.2'),
    (['3j']                 , '3j'),
    (['x']                  , 'x'),
    
    (['1', '2', '+']        , '3'),
    (['1.1', '2.2', '-']    , '-1.1'),
    (['j', 'j', '*']        , '(-1+0j)'),
    (['5', '4', '/']        , '1.25'),
    (['5', '4', '%']        , '1'),
    (['3', '4', '^']        , '81'),
    
    (['1', '2', '+', '3', '+'], '6'),
    (['1', '2', '-', '3', '-'], '-4'),
    (['1', '2', '*', '3', '*'], '6'),
    (['1', '2', '/', '3', '/'], '0.16666666666666666'),
    (['1', '2', '3', '/', '/'], '1.5'),
    (['2', '3', '2', '^', '^'], '512'),
    (['2', '3', '^', '2', '^'], '64'),
    
    (['j', 'j', '+']                        , '2j'),
    (['3j', '2', '-']                       , '(-2+3j)'),
    (['2', '2j', '+', '3', '3j', '+', '*']  , '12j'),
    
    (['pi', 'cos']                          , 'pi cos'),
    (['e', 'cos']                           , 'e cos'),
    
    (['x', 'x', '+']                        , 'x x +'),
    (['x', 'y', '+']                        , 'x y +'),
    
]

tree_replace_constants_cases = [
    (['pi', 'cos']  , '(-1-0j)'),
    (['e', 'ln']    , '(1+0j)'),
]