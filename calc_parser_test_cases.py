###########################################################
# Test cases for methods in calc_parser
#
# All groups are named '<method>_pass' or '<method>_fail' 
#   where <method> is the method to be tested.
#   "pass" groups should all pass.
#   "fail" groups should raise an exception.
# e.g for key, val in tokenize_pass we expect
#   calc_parser.tokenize(key) == val, while 
#   for x in tokenize_fail we expect 
#   calc_parser.tokenize(x) to raise a SyntaxError.
# Which particular error types should occur is
#   checked in calc_parser_test.py.
#  
###########################################################

tokenize_pass = {
    "1"                     : ["1"],
    "x"                     : ["x"],
    "pi"                    : ["pi"],
    "cf"                    : ["c", "*", "f"],
    "123"                   : ["123"],
    "1+2"                   : ["1", "+", "2"],
    "123+456"               : ["123", "+", "456"],
    "(4+5)*5"               : ["(", "4", "+", "5", ")", "*", "5"],
    "(123+456)*789"         : ["(", "123", "+", "456", ")", "*", "789"],
    "(234+567)*(123+456)"   : 
        ["(", "234", "+", "567", ")", "*", "(", "123", "+", "456", ")"],
    "  (  1.2 + 555.99)  "  : ["(", "1.2", "+", "555.99", ")"],
    " .323 + .7 + 0.7"      : [".323", "+", ".7", "+", "0.7"],
    "cos"                   : ["cos"],
    "coscos"                : ["cos", "cos"],
    "co"                    : ["c", "*", "o"],
    "cosin"                 : ["cos", "(", "i", "*", "n", ")"],
    "x*sin(x)"              : ["x", "*", "sin", "(", "x", ")"],
    "c*cos(s)"              : ["c", "*", "cos", "(", "s", ")"],
    "pi * e / cos(e)"       : ["pi", "*", "e", "/", "cos", "(", "e", ")"],
    "coscos(1.1+3)*cos(5)"  : 
        ["cos", "cos", "(", "1.1", "+", "3", 
            ")", "*", "cos", "(", "5", ")"],
    "cossin(1.1+3)*cos(5)"  : 
        ["cos", "sin", "(", "1.1", "+", "3", 
            ")", "*", "cos", "(", "5", ")"],
    "4nroot6"               : ["4", "nroot", "6"],
    }
    
# implicit multiplication...
#   4x    --> [4, *, x]
#   x4    --> [x, *, 4]
#   4pi   --> [4, *, pi]
#   4cos5 --> [4, *, cos, 5]
#   4(    --> [4, *, (]
#   )4    --> [), *, 4]
#   cos5x --> [cos, (, 5, *, x, )] (cos(5*x))
#   cos5*x --> cos(5) * x
# negatives...
#   -, 2342      --> -2342
#   y, -, x      --> y, -, x
#   y, +, -, x   --> y, -, x
#   y, *, -, x   --> y, *, (-1 * x)
#   
#   
#
    
tokenize_fail = ["555..555", "55.555.55", "..555", "555..",
                    "@", "123.@", "123+#" , ".", "+.+", ".."]
   
insert_times_symbols_pass = {
    ("4")                   : ["4"],
    ("4", "x")              : ["4", "*", "x"],
    ("4", "x", "y")         : ["4", "*", "x", "*", "y"],
    ("4", "w", "x", "y", "z") : 
        ["4", "*", "w", "*", "x", "*", "y", "*", "z"],
    ("x", "4")              : ["x", "*", "4"],
    ("4", "pi")             : ["4", "*", "pi"],
    ("pi", "4")             : ["pi", "*", "4"],
    ("4", "(")              : ["4", "*", "("],
    ("x", "(")              : ["x", "*", "("],
    (")", "4")              : [")", "*", "4"],
    (")", "x")              : [")", "*", "x"],
    (")", "cos")            : [")", "*", "cos"],
    ("4", "!", "5")         : ["4", "!", "*", "5"],
    ("4", "!", "cos")         : ["4", "!", "*", "cos"],
    ("4", "cos", "5", "*", "5", "sin", "4", "pi", "y", "cos", "e") : 
        ["4", "*", "cos", "5", "*", "5", "*", "sin", 
            "(", "4", "*", "pi", "*", "y", ")", "*", "cos", "e"],
    ("4", "nroot", "5")  : ["4", "nroot", "5"],
    ("(", "4", "+", "3", ")", "nroot", "(", "4", "+", "2", ")") :    
        ["(", "4", "+", "3", ")", "nroot", "(", "4", "+", "2", ")"],  
    ("4", "cos", "5")    : ["4", "*", "cos", "5"],
    ("cos", "5", "x")    : ["cos", "(", "5", "*", "x", ")"],
    }
   
to_RPN_tests = {
    "1"				  : ["1"],
    "3+4"			  : ["3", "4", "+"],
    "(3+4)*2"		  : ["3", "4", "+", "2", "*"],
    "3+4*2"			  : ["3", "4", "2", "*", "+"],
    "3+4*2/(1-5)^2^3" : 
        ["3", "4", "2", "*", "1", "5", "-", "2", "3", "^", "^", "/", "+"],
    "cos(3+4)"        : ["3", "4", "+", "cos"],
    "c * cos(c)"      : ["c", "c", "cos", "*"],
    "pi * e / cos(e)" : ["pi", "e", "*", "e", "cos", "/"]
    }

to_tree_pass = {
      "1"				: "1",
      "(1)" 			: "1",
      "1+2" 			: "+\n  2\n  1",
      "(1+2)" 			: "+\n  2\n  1",
      "1+2+3" 			: "+\n  3\n  +\n    2\n    1",
      "(1+2+3)"			: "+\n  3\n  +\n    2\n    1",
      "1+(2+3)" 		: "+\n  +\n    3\n    2\n  1",
      "(1+2)+3" 		: "+\n  3\n  +\n    2\n    1",
      "((1+2) + (3))"   : "+\n  3\n  +\n    2\n    1",
      "1+2+3+4"			: "+\n  4\n  +\n    3\n    +\n      2\n      1",
      "(1)+(2)+(3)+(4)" : "+\n  4\n  +\n    3\n    +\n      2\n      1",
      "4321+1234"		: "+\n  1234\n  4321",
      "(4321+1234)"		: "+\n  1234\n  4321",
      "2*3"				: "*\n  3\n  2",
      "(2*3)"			: "*\n  3\n  2",
      "1+(2*3)"			: "+\n  *\n    3\n    2\n  1",
      "1+2*3"			: "+\n  *\n    3\n    2\n  1",
      "(1+2)*3"         : "*\n  3\n  +\n    2\n    1",
      "1+2*3+4"			: "+\n  4\n  +\n    *\n      3\n      2\n    1",
      "(1+2)*(3+4)"		: "*\n  +\n    4\n    3\n  +\n    2\n    1",
      "cos(1)"          : "cos\n  1",
      "cos1"            : "cos\n  1",
      "c*cos1"          : "*\n  cos\n    1\n  c",
      "cossin1"         : "cos\n  sin\n    1",
      "cos(sin(1))"     : "cos\n  sin\n    1",
      "cos(1)*sin(1)"   : "*\n  sin\n    1\n  cos\n    1",
    }
    
to_tree_fail = ["1+2)", "(1+2", "((1+2)", "1*(2+4+7",
                    "1+)", "1)", "cos", "cossin"]
    
reduce_tests = {
    "1"				    : '1',
    "(1)" 			    : '1',
    "1+2" 			    : '3',
    "(1+2)" 			: '3',
    "1+2+3" 			: '6',
    "(1+2+3)"			: '6',
    "1+(2+3)" 		    : '6',
    "(1+2)+3" 		    : '6',
    "1+2+3+4"			: '10',
    "(1)+(2)+(3)+(4)"   : '10',
    "4321+1234"		    : '5555',
    "(4321+1234)"		: '5555',
    "2*3"				: '6',
    "(2*3)"			    : '6',
    "1+(2*3)"			: '7',
    "1+2*3"			    : '7',
    "1+2*3+4"			: '11',
    "(1+2)*(3+4)"		: '21',
    "cos(3.1415917)"    : '-1.0',
    "x"                 : 'x',
    "x + y"             : '+\n  y\n  x',
    "1 + x + y"         : '+\n  y\n  +\n    x\n    1',
    "e"                 : 'e',
    "1+e"               : '+\n  e\n  1',
    }
    
from math import *
reduce_replace_constants_pass = {
    "e"                 : '2.71828182846',
    "pi"                : '3.14159265359',
    "1 + e"             : '3.71828182846',
    "cos(p)"            : 'cos\n  p',
    "cos(pi)"           : str(cos(pi)),
    "sin(e)"            : str(sin(e)),
    "tan(e*pi)"         : str(tan(e*pi)),
    "ln(e^2)"           : str(log(e**2)),
    "log(10^3)"         : str(log10(10**3)),
    "ceil(1.5)"         : "2.0",
    "floor(1.5)"        : "1.0",
    "sqrt(16)"          : "4.0",
    "4nroot2"           : str(2**(1.0/4)),
    ".3nroot.7"         : str(.7**(1.0/.3)),
    "2^.3"              : str(2**.3),
    ".5^.3"             : str(.5**.3),
    "cos5pi"            : str(cos(5 * pi)),
    
    }